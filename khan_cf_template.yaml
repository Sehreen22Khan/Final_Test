AWSTemplateFormatVersion: '2010-09-09'
Description: >
  AWS CloudFormation template to deploy a Next.js frontend, a Flask backend,
  and a PostgreSQL database on AWS using ECS Fargate, RDS, and other services,
  including CI/CD pipelines with minimal manual steps.

Parameters:
  EnvironmentName:
    Type: String
    Default: khan
    Description: "The environment name (e.g., dev, staging, prod)"
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: "CIDR block for the VPC"
  PublicSubnet1CIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: "CIDR block for public subnet 1"
  PublicSubnet2CIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: "CIDR block for public subnet 2"
  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.3.0/24
    Description: "CIDR block for private subnet 1"
  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.4.0/24
    Description: "CIDR block for private subnet 2"
  GitHubRepositoryOwner:
    Type: String
    Description: "GitHub username or organization owning the repository"
  GitHubRepositoryName:
    Type: String
    Description: "Name of the GitHub repository containing both frontend and backend"

Resources:

  # S3 Bucket for CodePipeline Artifact Store
  CodePipelineArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-${AWS::Region}-${EnvironmentName}-codepipeline-artifacts"
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled

  # VPC and Networking Resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-igw"

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-public-subnet-1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-public-subnet-2"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-private-subnet-1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-private-subnet-2"

  # Route Tables and Routes
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-public-rt"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # NAT Gateways for Private Subnets
  EIPNatGateway1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-eip-ngw-1"

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPNatGateway1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-natgw-1"

  EIPNatGateway2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-eip-ngw-2"

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPNatGateway2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-natgw-2"

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-private-rt-1"

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-private-rt-2"

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway1

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # Security Groups
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP traffic to ALB"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-alb-sg"

  BackendServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow traffic to backend service"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-backend-sg"

  # IAM Roles and Policies
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-ecs-cluster"

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: CodeBuildExtraPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:GetCallerIdentity
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetBucketAcl
                Resource:
                  - !Sub "arn:aws:s3:::${CodePipelineArtifactStoreBucket}"
                  - !Sub "arn:aws:s3:::${CodePipelineArtifactStoreBucket}/*"

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CodePipelinePermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Permissions to interact with CodeBuild
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - codebuild:BatchGetProjects
                  - codebuild:ListBuildsForProject
                Resource:
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${EnvironmentName}-build-project"
              # Permission to pass the CodeBuild service role
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt CodeBuildServiceRole.Arn
              # Permissions for S3 artifact bucket
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:GetBucketVersioning
                Resource:
                  - !Sub "arn:aws:s3:::${CodePipelineArtifactStoreBucket}"
                  - !Sub "arn:aws:s3:::${CodePipelineArtifactStoreBucket}/*"
              # Permission to access Secrets Manager
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:github/personal-access-token*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess

  CodePipelineArtifactStoreBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CodePipelineArtifactStoreBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCodePipelineAccess
            Effect: Allow
            Principal:
              AWS: !GetAtt CodePipelineServiceRole.Arn
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:GetBucketVersioning
            Resource:
              - !Sub "arn:aws:s3:::${CodePipelineArtifactStoreBucket}"
              - !Sub "arn:aws:s3:::${CodePipelineArtifactStoreBucket}/*"

  BackendECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${EnvironmentName}-backend-repo"

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${EnvironmentName}-alb"
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      Type: application
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName}-alb"

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${EnvironmentName}-backend-tg"
      Port: 5000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: '/health'
      Matcher:
        HttpCode: '200-399'

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

  BackendListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values: ['/api/*']
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

  # ECS Task Definitions
  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${EnvironmentName}-backend"
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: backend
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EnvironmentName}-backend-repo:latest"
          PortMappings:
            - ContainerPort: 5000
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${EnvironmentName}-backend"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  BackendService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListener
      - BackendListenerRule
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Sub "${EnvironmentName}-backend-service"
      TaskDefinition: !Ref BackendTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref BackendServiceSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      LoadBalancers:
        - TargetGroupArn: !Ref BackendTargetGroup
          ContainerName: backend
          ContainerPort: 5000

  # CloudWatch Log Groups
  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${EnvironmentName}-backend"
      RetentionInDays: 7

  # Application Auto Scaling for the ECS Service
  BackendServiceScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: BackendService
    Properties:
      MaxCapacity: 5
      MinCapacity: 2
      ResourceId: !Sub "service/${ECSCluster}/${EnvironmentName}-backend-service"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # High CPU Alarm (Scale Out)
  BackendServiceHighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-backend-high-cpu"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Period: 60
      Threshold: 90
      Statistic: Average
      Dimensions:
        - Name: ServiceName
          Value: !Sub "${EnvironmentName}-backend-service"
        - Name: ClusterName
          Value: !Ref ECSCluster
      AlarmDescription: "Alarm if CPU > 90% for 2 minutes"
      TreatMissingData: missing

  BackendServiceScaleOutPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${EnvironmentName}-backend-scaleout-policy"
      PolicyType: StepScaling
      ScalingTargetId: !Ref BackendServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        StepAdjustments:
          - ScalingAdjustment: 1
            MetricIntervalLowerBound: 0
        Cooldown: 60
      Alarms:
        - Ref: BackendServiceHighCPUAlarm

  # Low CPU Alarm (Scale In)
  BackendServiceLowCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-backend-low-cpu"
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 2
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Period: 60
      Threshold: 50
      Statistic: Average
      Dimensions:
        - Name: ServiceName
          Value: !Sub "${EnvironmentName}-backend-service"
        - Name: ClusterName
          Value: !Ref ECSCluster
      AlarmDescription: "Alarm if CPU < 50% for 2 minutes"
      TreatMissingData: missing

  BackendServiceScaleInPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${EnvironmentName}-backend-scalein-policy"
      PolicyType: StepScaling
      ScalingTargetId: !Ref BackendServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        StepAdjustments:
          - ScalingAdjustment: -1
            MetricIntervalUpperBound: 0
        Cooldown: 60
      Alarms:
        - Ref: BackendServiceLowCPUAlarm

  # CodeBuild Project (assumes buildspec handles imagedefinitions.json)
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${EnvironmentName}-build-project"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: ENVIRONMENT_NAME
            Value: !Ref EnvironmentName
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
      Source:
        Type: CODEPIPELINE

  # CodePipeline with Deploy Stage to ECS
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${EnvironmentName}-pipeline"
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubRepositoryOwner
                Repo: !Ref GitHubRepositoryName
                Branch: main
                OAuthToken: !Sub "{{resolve:secretsmanager:github/personal-access-token:SecretString:github-token}}"
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: ECSDeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: '1'
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ClusterName: !Ref ECSCluster
                ServiceName: !Ref BackendService
                FileName: "imagedefinitions.json"
              RunOrder: 1

Outputs:
  LoadBalancerDNSName:
    Description: "DNS Name of the load balancer"
    Value: !GetAtt ApplicationLoadBalancer.DNSName
